const roomMembers = {}; // L∆∞u s·ªë ng∆∞·ªùi trong m·ªói ph√≤ng

module.exports = (io) => {
  io.on('connection', (socket) => {
    console.log('üü¢ Socket connected:', socket.id);

    socket.on('joinRoom', (roomCode) => {
      roomCode = String(roomCode);
      socket.join(roomCode);
      console.log(`User ${socket.id} joined room ${roomCode}`);

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng socket trong ph√≤ng
      if (!roomMembers[roomCode]) {
        roomMembers[roomCode] = new Set();
      }
      roomMembers[roomCode].add(socket.id);

      const numMembers = roomMembers[roomCode].size;
      console.log(`Room ${roomCode} has ${numMembers} members.`);

      // Khi ƒë·ªß 2 ng∆∞·ªùi th√¨ emit startGame
      if (numMembers === 2) {
        io.to(roomCode).emit('startGame', { room_code: roomCode });
        console.log(`üöÄ startGame emitted to room ${roomCode}`);
      }
    });

    socket.on('move', ({ roomCode, move }) => {
      socket.to(String(roomCode)).emit('move', move);
    });

    socket.on('resign', ({ roomCode, user }) => {
      socket.to(String(roomCode)).emit('opponentResigned', user);
    });

    socket.on('disconnect', () => {
      console.log('üî¥ Disconnected:', socket.id);
      // Xo√° socket kh·ªèi t·∫•t c·∫£ c√°c ph√≤ng ƒë√£ l∆∞u
      for (const roomCode in roomMembers) {
        roomMembers[roomCode].delete(socket.id);
        if (roomMembers[roomCode].size === 0) {
          delete roomMembers[roomCode]; // D·ªçn d·∫πp
        }
      }
    });
  });
};
